function determine_initial_jump_speed(gravity)
	return 200 * math.sqrt(-1 * gravity)
end

local GRAVITY = -50
local INITIAL_JUMP_VELOCITY = determine_initial_jump_speed(GRAVITY)

function init(self)
    -- This lets us handle input in this script
    msg.post(".", "acquire_input_focus")
    
    -- Save position
    self.position = go.get_position()
    self.originalXPosition = self.position.x
    msg.post("#", "reset")
end

function final(self)
    -- Return input focus when the object is deleted
    msg.post(".", "release_input_focus")
end

local function play_animation(self, animation)
    -- Only play animations which are not already playing
    if self.animation ~= animation then
        -- Tell the spine model to play the animation
        spine.play("#spinemodel", animation, go.PLAYBACK_LOOP_FORWARD, 0.15)
        -- Remember which animation is playing
        self.animation = animation
	end
end

local function update_animation(self)
	if self.game_mode == PLAY or self.game_mode == ENDING_SETUP then
	    -- make sure the right animation is playing
	    if self.ground_contact then
	        play_animation(self, hash("run_right"))
	    else
	        if self.velocity.y > 0 then
	            play_animation(self, hash("jump_right"))
	        else
	            play_animation(self, hash("fall_right"))
	        end
		end
	end
end

function update(self, timeSinceLastCall)
	if self.game_mode == PLAY or self.game_mode == ENDING_SETUP then
	    local GRAVITY = vmath.vector3(0, GRAVITY, 0)

	    if not self.ground_contact then
	        -- Apply gravity if there's no ground contact
	        self.velocity = self.velocity + GRAVITY
		end
		if self.game_mode == ENDING_SETUP then
			self.velocity.x = self.velocity.x + 0.6
		end

	    -- Apply velocity to the player character
	    go.set_position(go.get_position() + self.velocity * timeSinceLastCall)
	    
	    update_animation(self)
	    
	    if self.originalXPosition - 15 > self.position.x then
	    	msg.post("controller#script", "reset")
		end

	    -- Reset volatile state
	    self.correction = vmath.vector3()
		self.ground_contact = false
	elseif self.game_mode == ENDING_ANIMATION then
		
	end
end

local function handle_geometry_contact(self, normal, distance)
    -- Project the correction vector onto the contact normal
    -- (the correction vector is the 0-vector for the first contact point)
    local projection = vmath.dot(self.correction, normal)
    -- Calculate the compensation we need to make for this contact point
    local compensation = (distance - projection) * normal
    
    -- Add it to the correction vector
    self.correction = self.correction + compensation
    -- Apply the compensation to the player character
	go.set_position(go.get_position() + compensation)
    
    -- Check if the normal points enough up to consider the player standing on the ground
    -- (0.7 is roughly equal to 45 degrees deviation from pure vertical direction)
    if normal.y > 0.7 then
        self.ground_contact = true
    end
    
    -- Project the velocity onto the normal
    projection = vmath.dot(self.velocity, normal)
    
    -- If the projection is negative, it means that some of the velocity points towards the contact point
    if projection < 0 then
        -- Remove that component in that case
        self.velocity = self.velocity - projection * normal
    end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("reset") then
		msg.post("#collisionobject", "enable")
		play_animation(self, hash("idle_right"))
        self.velocity = vmath.vector3(0, 0, 0)
        self.correction = vmath.vector3()
        self.ground_contact = false
        
        go.set(".", "euler.z", 0)
        go.set_position(self.position)
    elseif message_id == hash("contact_point_response") then
        -- Check if we received a contact point message
        if message.group == hash("danger") then
            -- Die and restart
            play_animation(self, hash("die_right"))
            msg.post("#collisionobject", "disable")
            -- Add rotation and fall movement to hero as it dies. This can be greatly improved!
            
            -- go.animate(url, property, playback, to, easing, duration, [delay], [complete_function])
            go.animate(".", "euler.z", go.PLAYBACK_ONCE_FORWARD, 160, go.EASING_LINEAR, 0.7)
            go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, go.get_position().y - 200, go.EASING_INSINE, 0.5, 0.2,
                function()
                    msg.post("controller#script", "reset")
                end)
            elseif message.group == hash("geometry") then
            local oldXPosition = self.position.x
            handle_geometry_contact(self, message.normal, message.distance)
		end
	elseif message_id == hash("set_game_mode") then
		self.game_mode = message.game_mode
	elseif message_id == hash("set_animation") then
		play_animation(self, message.animation)
	end
end

local function jump(self)
    -- only allow jump from ground
    if self.ground_contact then
        -- set initial jump velocity
        self.velocity.y = INITIAL_JUMP_VELOCITY
    end
end

local function abort_jump(self)
    -- Cut the jump short if we are still going up
    if self.velocity.y > 0 then
        -- Scale down the upwards velocity
        self.velocity.y = self.velocity.y * 0.5
    end
end

function on_input(self, action_id, action)
    if action_id == hash("jump") or action_id == hash("touch") then
        if action.pressed then
            jump(self)
        elseif action.released then
            abort_jump(self)
        end
    end
end