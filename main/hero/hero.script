local GRAVITY = -50
local JUMP_TAKEOFF_SPEED = 900

function init(self)
    -- This tells the engine to send input to on_input() in this script
    msg.post(".", "acquire_input_focus")

    -- Save the starting position
    self.position = go.get_position()

    -- Keep track of movement vector and if there is ground contact
    self.velocity = vmath.vector3(0, 0, 0)
    self.ground_contact = false
end

function final(self)
    -- Return input focus when the object is deleted
    msg.post(".", "release_input_focus")
end

function update(self, timeSinceLastCall)
    local GRAVITY = vmath.vector3(0, GRAVITY, 0)

    if not self.ground_contact then
        -- Apply gravity if there's no ground contact
        self.velocity = self.velocity + GRAVITY
    end

    -- Apply velocity to the player character
    go.set_position(go.get_position() + self.velocity * timeSinceLastCall)

    -- Reset volatile state
    self.correction = vmath.vector3()
    self.ground_contact = false
end

local function handle_geometry_contact(self, normal, distance)
    -- Project the correction vector onto the contact normal
    -- (the correction vector is the 0-vector for the first contact point)
    local projection = vmath.dot(self.correction, normal)
    -- Calculate the compensation we need to make for this contact point
    local compensation = (distance - projection) * normal
    -- Add it to the correction vector
    self.correction = self.correction + compensation
    -- Apply the compensation to the player character
    go.set_position(go.get_position() + compensation)
    -- Check if the normal points enough up to consider the player standing on the ground
    -- (0.7 is roughly equal to 45 degrees deviation from pure vertical direction)
    if normal.y > 0.7 then
        self.ground_contact = true
    end
    -- Project the velocity onto the normal
    projection = vmath.dot(self.velocity, normal)
    -- If the projection is negative, it means that some of the velocity points towards the contact point
    if projection < 0 then
        -- Remove that component in that case
        self.velocity = self.velocity - projection * normal
    end
end

function on_message(self, message_id, message, sender)
    if message_id == hash("contact_point_response") then
        -- Check if we received a contact point message. One message for each contact point
        if message.group == hash("geometry") then
            handle_geometry_contact(self, message.normal, message.distance)
        end
    end
end

local function jump(self)
    -- only allow jump from ground
    if self.ground_contact then
        -- set take-off speed
        self.velocity.y = JUMP_TAKEOFF_SPEED
    end
end

local function abort_jump(self)
    -- Cut the jump short if we are still going up
    if self.velocity.y > 0 then
        -- Scale down the upwards speed
        self.velocity.y = self.velocity.y * 0.5
    end
end

function on_input(self, action_id, action)
    if action_id == hash("jump") or action_id == hash("touch") then
        if action.pressed then
            jump(self)
        elseif action.released then
            abort_jump(self)
        end
    end
end